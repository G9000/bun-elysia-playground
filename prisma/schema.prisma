generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User Type
model User {
    id             String    @id @unique
    email          String    @unique
    username       String?
    email_verified Boolean   @default(false)
    avatar         String?
    created_at     DateTime  @default(now())
    updated_at     DateTime? @updatedAt

    workspaces        Workspace[]
    auth_session      Session[]
    key               Key[]
    email_verfication EmailVerification?
}

model EmailVerification {
    id         String    @id @default(uuid())
    user_id    String    @unique
    expires    DateTime
    created_at DateTime  @default(now())
    updated_at DateTime? @updatedAt
    user       User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Session {
    id             String    @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    created_at     DateTime  @default(now())
    updated_at     DateTime? @updatedAt
    user           User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String    @id @unique
    hashed_password String?
    user_id         String
    created_at      DateTime  @default(now())
    updated_at      DateTime? @updatedAt
    user            User      @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Workspace {
    id          String         @id @unique
    name        String
    description String?
    owner_id    String
    tags        WorkspaceTag[]
    created_at  DateTime       @default(now())
    updated_at  DateTime?      @updatedAt

    owner     User       @relation(fields: [owner_id], references: [id])
    workflows Workflow[]
}

model Tag {
    id         String         @id @unique
    name       String
    workspaces WorkspaceTag[]
    created_at DateTime       @default(now())
    updated_at DateTime?      @updatedAt
}

model WorkspaceTag {
    workspace_id String
    tag_id       String

    workspace Workspace @relation(fields: [workspace_id], references: [id])
    tag       Tag       @relation(fields: [tag_id], references: [id])

    @@id([workspace_id, tag_id])
}

model Workflow {
    id           String    @id @unique
    name         String
    description  String?
    workspace_id String
    created_at   DateTime  @default(now())
    updated_at   DateTime? @updatedAt

    workspace Workspace @relation(fields: [workspace_id], references: [id])
    modules   Module[]
}

model Module {
    id          String    @id @unique
    name        String
    description String?
    workflow_id String
    items       Json?
    version     Int?
    created_at  DateTime  @default(now())
    updated_at  DateTime? @updatedAt

    workflow Workflow @relation(fields: [workflow_id], references: [id])
}
